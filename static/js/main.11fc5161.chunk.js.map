{"version":3,"sources":["components/Header/Header.module.css","utils/Input/Input.module.css","utils/Button/Button.module.css","utils/Navlink/Navlink.tsx","components/Header/Header.tsx","utils/helpers/routes.path.ts","utils/Input/Input.tsx","utils/Button/Button.tsx","pages/Login/Login.tsx","pages/Registration/Registration.tsx","pages/NewPassword/NewPassword.tsx","api/instance.api.ts","api/api.ts","redux/reducers/passwordRecoveryReducer.ts","pages/PasswordRecovery/PasswordRecovery.tsx","pages/Profile/Profile.tsx","utils/helpers/routes.tsx","components/App/App.tsx","serviceWorker.ts","redux/reducers/loginReducer.ts","redux/reducers/registrationReducer.ts","redux/reducers/newPasswordReducer.ts","redux/reducers/profileReducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","Navlink","props","to","path","title","Header","className","styles","nav","Input","input","type","placeholder","onChange","changeHandler","value","Button","text","clickHandler","btn","onClick","Login","Registration","NewPassword","instance","axios","create","baseURL","apiMethods","email","post","html1","html2","SET_SERVER_ANSWER","initialState","loading","isAuth","serverAnswer","PasswordRecovery","dispatch","useDispatch","recoveryStateTitle","useSelector","state","passwordRecovery","useState","setEmail","e","currentTarget","a","data","console","log","resetPassword","Profile","AppRoutes","render","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","login","registration","newPassword","action","answer","profile","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.11fc5161.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3yRlw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1Pojl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__31zS4\"};","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\ntype PropsType = {\n    title: string\n    path: string\n}\n\nexport const Navlink = (props: PropsType) => {\n    return (\n        <div>\n            <NavLink to={props.path}>{props.title}</NavLink>\n        </div>\n    );\n};","import React from \"react\";\nimport {Navlink} from \"../../utils/Navlink/Navlink\";\nimport {loginPath, newPassPath, profilePath, registrationPath, restorePath} from \"../../utils/helpers/routes.path\";\nimport styles from './Header.module.css';\n\nexport const Header = () => {\n    return (\n        <header>\n            <nav className={styles.nav}>\n                <Navlink title={'Логин'} path={loginPath}/>\n                <Navlink title={'Зарегистрироваться'} path={registrationPath}/>\n                <Navlink title={'Профиль'} path={profilePath}/>\n                <Navlink title={'Сбросить пароль'} path={restorePath}/>\n                <Navlink title={'Установить новый пароль'} path={newPassPath}/>\n            </nav>\n        </header>\n    );\n};","export const loginPath = '/login';\nexport const registrationPath = '/registration';\nexport const profilePath = '/profile';\nexport const restorePath = '/restore-pass';\nexport const newPassPath = '/new-pass';","import React, {ChangeEvent} from \"react\";\nimport styles from './Input.module.css';\n\ntype PropsType = {\n    type: string\n    placeholder: string\n    value?: string\n    changeHandler?: (e: ChangeEvent<HTMLInputElement>) => void\n};\n\nexport const Input = (props: PropsType) => {\n    return (\n        <div>\n            <input\n                className={styles.input}\n                type={props.type}\n                placeholder={props.placeholder}\n                onChange={props.changeHandler}\n                value={props.value}\n            />\n        </div>\n    );\n};","import React from \"react\";\nimport styles from './Button.module.css'\n\ntype PropsType = {\n    text: string\n    clickHandler?: () => void\n};\n\nexport const Button = ({text, clickHandler}: PropsType) => {\n    const onClickHandler = () => clickHandler && clickHandler();\n\n    return (\n        <div>\n            <button\n                className={styles.btn}\n                onClick={onClickHandler}\n            >{text}</button>\n        </div>\n    );\n};","import React from 'react';\nimport {Input} from \"../../utils/Input/Input\";\nimport {Button} from \"../../utils/Button/Button\";\n\nexport const Login: React.FC = () => {\n    return (\n        <>\n            <h1>Login page</h1>\n            <form>\n                <Input type={'text'} placeholder={'Enter you email'}/>\n                <Input type={'password'} placeholder={'Enter you password'}/>\n                <Button text={'login'}/>\n            </form>\n        </>\n    );\n};","import React from \"react\";\nimport {Input} from \"../../utils/Input/Input\";\nimport {Button} from \"../../utils/Button/Button\";\n\nexport const Registration: React.FC = () => {\n    return (\n        <>\n            <h1>Registration page</h1>\n            <Input type={'text'} placeholder={'Впишите свой логин'} />\n            <Input type={'password'} placeholder={'Впишите свой пароль'} />\n            <Button text={'Зарегистрироваться'} />\n        </>\n    );\n};","import React from \"react\";\nimport {Input} from \"../../utils/Input/Input\";\nimport {Button} from \"../../utils/Button/Button\";\n\nexport const NewPassword: React.FC = () => {\n    return (\n        <>\n            <h1>NewPassword page</h1>\n            <Input type={'password'} placeholder={'Введите старый пароль'} />\n            <Input type={'password'} placeholder={'Введите новый пароль'} />\n            <Button text={'Отправить'} />\n        </>\n    );\n};","import axios from 'axios';\n\nexport const instance = axios.create({\n    // withCredentials: true,\n    baseURL: 'http://localhost:7542/1.0/'\n});","import {instance} from \"./instance.api\";\n\nexport const apiMethods = {\n    getUsers() {\n        return instance.get(`social/users`).then(response => response.data);\n    },\n    getOneUser(userName: string) {\n        return instance.get(`social/users?userName=${userName}`).then(response => response.data);\n    },\n    login(email: string, password: string, rememberMe: boolean) {\n        return instance.post(`auth/login`, {email, password, rememberMe}).then(response => response.data);\n    },\n    register(email: string, password: string) {\n        return instance.post(`auth/register`, {email, password}).then(response => response.data);\n    },\n    forgot(email: string) {\n        return instance.post(`auth/forgot`, {\n            email,\n            html1: \"<a href='http://localhost:3000/#/reset-password/\",\n            html2: \"'>reset-password-link</a>\"\n            // }).then(response => response.data);\n        });\n    },\n    me(token: string) {\n        return instance.post(`auth/me`, {token}).then(response => response.data);\n    },\n    setNewPassword(resetPasswordToken: string, password: string) {\n        return instance.post(`auth/set-new-password`, {resetPasswordToken, password}).then(response => response.data);\n    },\n    meChange(token: string, name: string, avatar: string) {\n        return instance.put(`auth/me`, {token, name, avatar}).then(response => response.data);\n    }\n};","import {ThunkAction, ThunkDispatch} from 'redux-thunk';\nimport {AppStateType} from \"../store\";\nimport {apiMethods} from \"../../api/api\";\n\nconst SET_SERVER_ANSWER = 'Reducers/PasswordRecovery/SET_SERVER_ANSWER';\n\ntype InitialStateType = {\n    title: string\n    loading: boolean\n    isAuth: boolean\n    serverAnswer: string\n};\n\nconst initialState = {\n    title: '',\n    loading: false,\n    isAuth: false,\n    serverAnswer: ''\n};\n\nexport const passwordRecoveryReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        case SET_SERVER_ANSWER:\n            return {...state, serverAnswer: action.answer};\n        default:\n            return state;\n    }\n};\n\n// actions\ntype ActionsType = SetServerAnswerType;\n\ntype SetServerAnswerType = {\n    type: typeof SET_SERVER_ANSWER,\n    answer: string\n};\n\nconst setServerAnswerAc = (answer: string): SetServerAnswerType => ({\n    type: SET_SERVER_ANSWER,\n    answer\n});\n\n// thunks\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionsType>;\ntype ThunkDispatchType = ThunkDispatch<AppStateType, unknown, ActionsType>;\n\nexport const resetPassword = (email: string): ThunkType => {\n    return async (dispatch: ThunkDispatchType) => {\n        const data = await apiMethods.forgot(email);\n        console.log(data);\n        debugger\n\n        // data.success\n        //     ? dispatch(setServerAnswerAc('ok'))\n        //     : dispatch(setServerAnswerAc('some error'));\n    };\n};","import React, {ChangeEvent, useState} from \"react\";\nimport {Button} from \"../../utils/Button/Button\";\nimport {Input} from \"../../utils/Input/Input\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../redux/store\";\nimport {resetPassword} from \"../../redux/reducers/passwordRecoveryReducer\";\n\nexport const PasswordRecovery: React.FC = () => {\n    const dispatch = useDispatch();\n    const recoveryStateTitle: any = useSelector<AppStateType>(state => state.passwordRecovery.title);\n    const [email, setEmail] = useState(recoveryStateTitle);\n\n    const recoveryHandler = () => dispatch(resetPassword(email));\n    const changeEmail = (e: ChangeEvent<HTMLInputElement>) => setEmail(e.currentTarget.value);\n\n    return (\n        <>\n            <h1>PasswordRecovery page</h1>\n            <Input\n                type={'email'}\n                placeholder={'Введите email для сброса'}\n                changeHandler={changeEmail}\n                value={email}\n            />\n            <Button\n                text={'Сбросить пароль'}\n                clickHandler={recoveryHandler}\n            />\n        </>\n    );\n};","import React from \"react\";\n\nexport const Profile: React.FC = () => {\n    return (\n        <h1>Profile page</h1>\n    );\n};","import React from \"react\";\nimport {Route} from \"react-router-dom\";\nimport {Login} from \"../../pages/Login/Login\";\nimport {Registration} from \"../../pages/Registration/Registration\";\nimport {NewPassword} from \"../../pages/NewPassword/NewPassword\";\nimport {PasswordRecovery} from \"../../pages/PasswordRecovery/PasswordRecovery\";\nimport {Profile} from \"../../pages/Profile/Profile\";\n\nexport const AppRoutes = () => {\n    return (\n        <>\n            <Route path='/login' render={() => <Login />} />\n            <Route path='/registration' render={() => <Registration />} />\n            <Route path='/new-pass' render={() => <NewPassword />} />\n            <Route path='/restore-pass' render={() => <PasswordRecovery />} />\n            <Route path='/profile' render={() => <Profile />} />\n        </>\n    );\n};","import * as React from 'react';\nimport './App.css';\nimport {Header} from \"../Header/Header\";\nimport {AppRoutes} from \"../../utils/helpers/routes\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <div className=\"app-wrapper-content\">\n                <AppRoutes/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","type InitialStateType = {\n    title: string\n};\n\nconst initialState = {\n    title: 'Login'\n};\n\nexport const loginReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        default:\n            return state;\n    }\n};","type InitialStateType = {\n    title: string\n};\n\nconst initialState = {\n    title: 'Registration'\n};\n\nexport const registrationReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        default:\n            return state;\n    }\n};","type InitialStateType = {\n    title: string\n};\n\nconst initialState = {\n    title: 'NewPassword'\n};\n\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        default:\n            return state;\n    }\n};","type InitialStateType = {\n    title: string\n};\n\nconst initialState = {\n    title: 'Profile'\n};\n\nexport const profileReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        default:\n            return state;\n    }\n};","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport {loginReducer} from \"./reducers/loginReducer\";\nimport {registrationReducer} from \"./reducers/registrationReducer\";\nimport {newPasswordReducer} from \"./reducers/newPasswordReducer\";\nimport {passwordRecoveryReducer} from \"./reducers/passwordRecoveryReducer\";\nimport {profileReducer} from \"./reducers/profileReducer\";\n\nconst rootReducer = combineReducers({\n    login: loginReducer,\n    registration: registrationReducer,\n    newPassword: newPasswordReducer,\n    passwordRecovery: passwordRecoveryReducer,\n    profile: profileReducer\n});\n\nexport type AppStateType = ReturnType<typeof rootReducer>;\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}