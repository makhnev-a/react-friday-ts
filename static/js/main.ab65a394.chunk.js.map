{"version":3,"sources":["components/Header/Header.module.css","utils/Input/Input.module.css","utils/Button/Button.module.css","utils/Navlink/Navlink.tsx","components/Header/Header.tsx","utils/helpers/routes.path.ts","utils/Input/Input.tsx","utils/Button/Button.tsx","pages/Login/Login.tsx","pages/Registration/Registration.tsx","pages/NewPassword/NewPassword.tsx","pages/PasswordRecovery/PasswordRecovery.tsx","pages/Profile/Profile.tsx","utils/helpers/routes.tsx","components/App/App.tsx","serviceWorker.ts","redux/reducers/loginReducer.ts","redux/reducers/registrationReducer.ts","redux/reducers/newPasswordReducer.ts","redux/reducers/passwordRecoveryReducer.ts","redux/reducers/profileReducer.ts","redux/store.ts","index.tsx"],"names":["module","exports","Navlink","props","to","path","title","Header","className","styles","nav","Input","input","type","placeholder","Button","btn","text","Login","Registration","NewPassword","PasswordRecovery","Profile","AppRoutes","render","App","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","login","state","registration","newPassword","passwordRecovery","profile","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab65a394.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3yRlw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__1Pojl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__31zS4\"};","import React from \"react\";\nimport {NavLink} from \"react-router-dom\";\n\ntype PropsType = {\n    title: string\n    path: string\n}\n\nexport const Navlink = (props: PropsType) => {\n    return (\n        <div>\n            <NavLink to={props.path}>{props.title}</NavLink>\n        </div>\n    );\n};","import React from \"react\";\nimport {Navlink} from \"../../utils/Navlink/Navlink\";\nimport {loginPath, newPassPath, profilePath, registrationPath, restorePath} from \"../../utils/helpers/routes.path\";\nimport styles from './Header.module.css';\n\nexport const Header = () => {\n    return (\n        <header>\n            <nav className={styles.nav}>\n                <Navlink title={'Логин'} path={loginPath} />\n                <Navlink title={'Зарегистрироваться'} path={registrationPath} />\n                <Navlink title={'Профиль'} path={profilePath} />\n                <Navlink title={'Сбросить пароль'} path={restorePath} />\n                <Navlink title={'Установить новый пароль'} path={newPassPath} />\n            </nav>\n        </header>\n    );\n};","export const loginPath = '/login';\nexport const registrationPath = '/registration';\nexport const profilePath = '/profile';\nexport const restorePath = '/restore-pass';\nexport const newPassPath = '/new-pass';","import React from \"react\";\nimport styles from './Input.module.css';\n\ntype PropsType = {\n    type: string\n    placeholder: string\n    value?: string\n    changeHandler?: () => void\n};\n\nexport const Input = (props: PropsType) => {\n    return (\n        <div>\n            <input\n                className={styles.input}\n                type={props.type}\n                placeholder={props.placeholder}\n            />\n        </div>\n    );\n};","import React from \"react\";\nimport styles from './Button.module.css'\n\ntype PropsType = {\n    text: string\n    clickHandler?: () => void\n};\n\nexport const Button = (props: PropsType) => {\n    return (\n        <div>\n            <button className={styles.btn}>{props.text}</button>\n        </div>\n    );\n};","import React from 'react';\nimport {Input} from \"../../utils/Input/Input\";\nimport {Button} from \"../../utils/Button/Button\";\n\nexport const Login = () => {\n    return (\n        <>\n            <h1>Login page</h1>\n            <form>\n                <Input type={'text'} placeholder={'Enter you email'} />\n                <Input type={'password'} placeholder={'Enter you password'} />\n                <Button text={'login'} />\n            </form>\n        </>\n    );\n};","import React from \"react\";\nimport {Input} from \"../../utils/Input/Input\";\nimport {Button} from \"../../utils/Button/Button\";\n\nexport const Registration = () => {\n    return (\n        <>\n            <h1>Registration page</h1>\n            <Input type={'text'} placeholder={'Впишите свой логин'} />\n            <Input type={'password'} placeholder={'Впишите свой пароль'} />\n            <Button text={'Зарегистрироваться'} />\n        </>\n    );\n};","import React from \"react\";\nimport {Input} from \"../../utils/Input/Input\";\nimport {Button} from \"../../utils/Button/Button\";\n\nexport const NewPassword = () => {\n    return (\n        <>\n            <h1>NewPassword page</h1>\n            <Input type={'password'} placeholder={'Введите старый пароль'} />\n            <Input type={'password'} placeholder={'Введите новый пароль'} />\n            <Button text={'Отправить'} />\n        </>\n    );\n};","import React from \"react\";\nimport {Input} from \"../../utils/Input/Input\";\nimport {Button} from \"../../utils/Button/Button\";\n\nexport const PasswordRecovery = () => {\n   return (\n      <>\n         <h1>PasswordRecovery page</h1>\n         <Button text={'Сбросить пароль'} />\n      </>\n   );\n};","import React from \"react\";\n\nexport const Profile = () => {\n    return (\n        <h1>Profile page</h1>\n    );\n};","import React from \"react\";\nimport {Route} from \"react-router-dom\";\nimport {Login} from \"../../pages/Login/Login\";\nimport {Registration} from \"../../pages/Registration/Registration\";\nimport {NewPassword} from \"../../pages/NewPassword/NewPassword\";\nimport {PasswordRecovery} from \"../../pages/PasswordRecovery/PasswordRecovery\";\nimport {Profile} from \"../../pages/Profile/Profile\";\n\nexport const AppRoutes = () => {\n    return (\n        <>\n            <Route path='/login' render={Login}/>\n            <Route path='/registration' render={Registration}/>\n            <Route path='/new-pass' render={NewPassword}/>\n            <Route path='/restore-pass' render={PasswordRecovery}/>\n            <Route path='/profile' render={Profile}/>\n        </>\n    );\n};","import * as React from 'react';\nimport './App.css';\nimport {Header} from \"../Header/Header\";\nimport {AppRoutes} from \"../../utils/helpers/routes\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <div className=\"app-wrapper-content\">\n                <AppRoutes/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","type InitialStateType = {\n    title: string\n};\n\nconst initialState = {\n    title: 'Login'\n};\n\nexport const loginReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        default:\n            return state;\n    }\n};","type InitialStateType = {\n    title: string\n};\n\nconst initialState = {\n    title: 'Registration'\n};\n\nexport const registrationReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        default:\n            return state;\n    }\n};","type InitialStateType = {\n    title: string\n};\n\nconst initialState = {\n    title: 'NewPassword'\n};\n\nexport const newPasswordReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        default:\n            return state;\n    }\n};","type InitialStateType = {\n    title: string\n};\n\nconst initialState = {\n    title: 'Password Recovery'\n};\n\nexport const passwordRecoveryReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        default:\n            return state;\n    }\n};","type InitialStateType = {\n    title: string\n};\n\nconst initialState = {\n    title: 'Profile'\n};\n\nexport const profileReducer = (state: InitialStateType = initialState, action: any): any => {\n    switch (action) {\n        default:\n            return state;\n    }\n};","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport {loginReducer} from \"./reducers/loginReducer\";\nimport {registrationReducer} from \"./reducers/registrationReducer\";\nimport {newPasswordReducer} from \"./reducers/newPasswordReducer\";\nimport {passwordRecoveryReducer} from \"./reducers/passwordRecoveryReducer\";\nimport {profileReducer} from \"./reducers/profileReducer\";\n\nconst rootReducer = combineReducers({\n    login: loginReducer,\n    registration: registrationReducer,\n    newPassword: newPasswordReducer,\n    passwordRecovery: passwordRecoveryReducer,\n    profile: profileReducer\n});\n\nexport type AppStateType = ReturnType<typeof rootReducer>;\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from \"react-router-dom\";\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}